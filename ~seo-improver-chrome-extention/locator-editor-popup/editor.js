// locator-modal-content.js
// \file locator-modal-content.js
// -*- coding: utf-8 -*-

/**
 * Content Script –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤
 * =======================================================
 * –í–Ω–µ–¥—Ä—è–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
 */

(function () {
    'use strict';

    /**
     * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    const ModalConfig = {
        currentDomain: null,
        currentConfig: {},
        originalConfig: {},
        activeKey: null,
        isOpen: false
    };

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     * –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç DOM —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     * 
     * Returns:
     *     HTMLElement: Overlay —ç–ª–µ–º–µ–Ω—Ç —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
     */
    function createModalHTML() {
        const overlay = document.createElement('div');
        overlay.id = 'locator-editor-overlay';

        overlay.innerHTML = `
            <div id="locator-editor-modal">
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
                <div class="locator-modal-header">
                    <div class="locator-modal-title">
                        <h1>‚öôÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –ª–æ–∫–∞—Ç–æ—Ä–æ–≤</h1>
                        <h2 id="locator-domain-name">–ó–∞–≥—Ä—É–∑–∫–∞...</h2>
                    </div>
                    <div class="locator-modal-actions">
                        <button id="locator-save-btn" class="locator-modal-btn" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è">
                            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                        <button id="locator-export-btn" class="locator-modal-btn" title="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é">
                            üì• –≠–∫—Å–ø–æ—Ä—Ç
                        </button>
                        <button id="locator-reload-btn" class="locator-modal-btn" title="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞">
                            üîÑ –°–±—Ä–æ—Å
                        </button>
                        <button id="locator-close-btn" class="locator-modal-close" title="–ó–∞–∫—Ä—ã—Ç—å">
                            ‚úï
                        </button>
                    </div>
                </div>

                <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
                <div class="locator-modal-body">
                    <!-- –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π -->
                    <aside class="locator-sidebar" id="locator-keys-list">
                        <div class="locator-editor-placeholder">
                            –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤...
                        </div>
                    </aside>

                    <!-- –ü–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
                    <section class="locator-editor-panel" id="locator-editor-panel">
                        <div class="locator-editor-placeholder">
                            <p>–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                        </div>
                    </section>
                </div>

                <!-- –§—É—Ç–µ—Ä -->
                <div class="locator-modal-footer">
                    <div class="locator-status-bar">
                        <span class="locator-status-text" id="locator-status-text">–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ</span>
                    </div>
                </div>
            </div>
        `;

        return overlay;
    }

    /**
     * –í–Ω–µ–¥—Ä–µ–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
     * –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∏–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
     */
    function injectStyles() {
        if (document.getElementById('locator-modal-styles')) {
            return;
        }

        const link = document.createElement('link');
        link.id = 'locator-modal-styles';
        link.rel = 'stylesheet';
        link.href = chrome.runtime.getURL('editor.css');
        document.head.appendChild(link);
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     * –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    async function openModal() {
        if (ModalConfig.isOpen) {
            return;
        }

        injectStyles();

        const overlay = createModalHTML();
        document.body.appendChild(overlay);

        ModalConfig.isOpen = true;
        document.body.style.overflow = 'hidden';

        attachEventListeners();
        await loadLocatorsForCurrentPage();
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     * –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    function closeModal() {
        const overlay = document.getElementById('locator-editor-overlay');
        if (overlay) {
            overlay.remove();
        }

        ModalConfig.isOpen = false;
        document.body.style.overflow = '';
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     * –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    function attachEventListeners() {
        const closeBtn = document.getElementById('locator-close-btn');
        const saveBtn = document.getElementById('locator-save-btn');
        const exportBtn = document.getElementById('locator-export-btn');
        const reloadBtn = document.getElementById('locator-reload-btn');
        const overlay = document.getElementById('locator-editor-overlay');

        if (closeBtn) {
            closeBtn.addEventListener('click', closeModal);
        }

        if (saveBtn) {
            saveBtn.addEventListener('click', saveConfiguration);
        }

        if (exportBtn) {
            exportBtn.addEventListener('click', exportConfiguration);
        }

        if (reloadBtn) {
            reloadBtn.addEventListener('click', reloadConfiguration);
        }

        if (overlay) {
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    closeModal();
                }
            });
        }

        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && ModalConfig.isOpen) {
                closeModal();
            }
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –¥–æ–º–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ª–æ–∫–∞—Ç–æ—Ä—ã
     */
    async function loadLocatorsForCurrentPage() {
        try {
            updateStatus('–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤...');

            const url = new URL(window.location.href);
            const hostname = url.hostname.replace(/^www\./, '');

            ModalConfig.currentDomain = hostname;

            const domainElement = document.getElementById('locator-domain-name');
            if (domainElement) {
                domainElement.textContent = `–î–æ–º–µ–Ω: ${hostname}`;
            }

            await loadLocatorsForDomain(hostname);

            updateStatus('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 'success');

        } catch (ex) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤:', ex);
            updateStatus(`–û—à–∏–±–∫–∞: ${ex.message}`, 'error');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
     * –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª –ª–æ–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ locators/
     * 
     * Args:
     *     hostname (string): –ò–º—è –¥–æ–º–µ–Ω–∞ –±–µ–∑ www
     */
    async function loadLocatorsForDomain(hostname) {
        try {
            const locatorPath = `locators/${hostname}.json`;
            const locatorUrl = chrome.runtime.getURL(locatorPath);

            const response = await fetch(locatorUrl);

            if (!response.ok) {
                throw new Error(`–§–∞–π–ª –ª–æ–∫–∞—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${locatorPath}`);
            }

            const config = await response.json();

            ModalConfig.currentConfig = JSON.parse(JSON.stringify(config));
            ModalConfig.originalConfig = JSON.parse(JSON.stringify(config));

            renderKeysList();

        } catch (ex) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', ex);

            ModalConfig.currentConfig = {};
            ModalConfig.originalConfig = {};

            const keysList = document.getElementById('locator-keys-list');
            if (keysList) {
                keysList.innerHTML = `
                    <div class="locator-editor-placeholder" style="color: #dc3545; padding: 20px;">
                        <p style="margin: 0 0 8px 0; font-weight: 600;">–õ–æ–∫–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        <p style="font-size: 12px; margin: 0;">
                            –§–∞–π–ª –ª–æ–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –¥–æ–º–µ–Ω–∞<br>
                            <strong>${hostname}</strong><br>
                            –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏
                        </p>
                    </div>
                `;
            }

            throw ex;
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π –ª–æ–∫–∞—Ç–æ—Ä–æ–≤
     * –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
     */
    function renderKeysList() {
        const keysList = document.getElementById('locator-keys-list');
        if (!keysList) {
            return;
        }

        keysList.innerHTML = '';

        const keys = Object.keys(ModalConfig.currentConfig);

        if (keys.length === 0) {
            keysList.innerHTML = `
                <div class="locator-editor-placeholder">
                    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞
                </div>
            `;
            return;
        }

        keys.forEach(key => {
            const keyItem = document.createElement('div');
            keyItem.className = 'locator-key-item';
            keyItem.textContent = key;
            keyItem.dataset.key = key;
            keyItem.addEventListener('click', () => showEditorForKey(key));
            keysList.appendChild(keyItem);
        });

        updateStatus(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–π: ${keys.length}`, 'success');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
     * –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –ª–æ–∫–∞—Ç–æ—Ä–∞
     * 
     * Args:
     *     key (string): –ö–ª—é—á –ª–æ–∫–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    function showEditorForKey(key) {
        ModalConfig.activeKey = key;

        document.querySelectorAll('.locator-key-item').forEach(item => {
            item.classList.toggle('active', item.dataset.key === key);
        });

        const data = ModalConfig.currentConfig[key];
        const editorPanel = document.getElementById('locator-editor-panel');

        if (!editorPanel) {
            return;
        }

        editorPanel.innerHTML = '';

        const formTitle = document.createElement('h2');
        formTitle.className = 'locator-form-title';
        formTitle.textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${key}`;
        editorPanel.appendChild(formTitle);

        const formGrid = document.createElement('div');
        formGrid.className = 'locator-form-grid';

        if (typeof data === 'string') {
            formGrid.innerHTML = createInput('value', '–ó–Ω–∞—á–µ–Ω–∏–µ', data, 'text', key);
        } else {
            formGrid.innerHTML = `
                ${createSelect('by', '–ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ (By)', data.by, ['XPATH', 'CSS_SELECTOR', 'ID', 'NAME', 'CLASS_NAME', 'TAG_NAME'])}
                ${createTextArea('selector', '–°–µ–ª–µ–∫—Ç–æ—Ä', data.selector)}
                ${createInput('attribute', '–ê—Ç—Ä–∏–±—É—Ç', data.attribute, 'text')}
                ${createSelect('strategy_for_multiple_selectors', '–°—Ç—Ä–∞—Ç–µ–≥–∏—è', data.strategy_for_multiple_selectors, ['find_first_match', 'find_all_matches'])}
                ${createSelect('if_list', '–ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫', data.if_list, ['first', 'all', 'last'])}
                ${createCheckbox('mandatory', '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π', data.mandatory)}
                ${createInput('text_to_be_present_in_element', '–û–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç', data.text_to_be_present_in_element || '', 'text')}
                ${createInput('event', '–°–æ–±—ã—Ç–∏–µ', data.event || '', 'text')}
                ${createSelect('timeout_for_event', '–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è', data.timeout_for_event, ['presence_of_element_located', 'element_to_be_clickable', 'visibility_of_element_located'])}
                ${createInput('timeout', '–¢–∞–π–º–∞—É—Ç (—Å–µ–∫)', data.timeout, 'number')}
                ${createTextArea('locator_description', '–û–ø–∏—Å–∞–Ω–∏–µ', data.locator_description)}
            `;
        }

        editorPanel.appendChild(formGrid);
        attachFormEventListeners(key);
        updateStatus(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${key}`);
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
     * –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     * 
     * Args:
     *     parentKey (string): –ö–ª—é—á —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –ª–æ–∫–∞—Ç–æ—Ä–∞
     */
    function attachFormEventListeners(parentKey) {
        const fields = document.querySelectorAll('[data-field]');

        fields.forEach(field => {
            const fieldKey = field.dataset.field;
            const eventType = (field.type === 'checkbox' || field.tagName === 'SELECT') ? 'change' : 'input';

            field.addEventListener(eventType, (e) => {
                let value = e.target.value;

                if (e.target.type === 'checkbox') {
                    value = e.target.checked;
                } else if (e.target.type === 'number') {
                    value = parseFloat(value) || 0;
                }

                if (typeof ModalConfig.currentConfig[parentKey] === 'object') {
                    ModalConfig.currentConfig[parentKey][fieldKey] = value;
                } else {
                    ModalConfig.currentConfig[parentKey] = value;
                }

                updateStatus('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞)', 'error');
            });
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ chrome.storage
     */
    async function saveConfiguration() {
        try {
            updateStatus('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');

            const storageKey = `locators_${ModalConfig.currentDomain}`;
            await chrome.storage.local.set({ [storageKey]: ModalConfig.currentConfig });

            ModalConfig.originalConfig = JSON.parse(JSON.stringify(ModalConfig.currentConfig));

            const saveBtn = document.getElementById('locator-save-btn');
            if (saveBtn) {
                saveBtn.classList.add('success');
                setTimeout(() => {
                    saveBtn.classList.remove('success');
                }, 2000);
            }

            updateStatus('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');

            setTimeout(() => {
                updateStatus('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 'success');
            }, 2000);

        } catch (ex) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', ex);
            updateStatus(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${ex.message}`, 'error');
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ JSON —Ñ–∞–π–ª
     * –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç JSON —Ñ–∞–π–ª —Å —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
     */
    function exportConfiguration() {
        try {
            const filename = `${ModalConfig.currentDomain}_locators.json`;
            const dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(
                JSON.stringify(ModalConfig.currentConfig, null, 2)
            );

            const downloadAnchorNode = document.createElement('a');
            downloadAnchorNode.setAttribute('href', dataStr);
            downloadAnchorNode.setAttribute('download', filename);
            document.body.appendChild(downloadAnchorNode);
            downloadAnchorNode.click();
            downloadAnchorNode.remove();

            updateStatus('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞', 'success');

        } catch (ex) {
            console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', ex);
            updateStatus(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${ex.message}`, 'error');
        }
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    async function reloadConfiguration() {
        try {
            updateStatus('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');

            ModalConfig.currentConfig = JSON.parse(JSON.stringify(ModalConfig.originalConfig));

            renderKeysList();

            if (ModalConfig.activeKey) {
                showEditorForKey(ModalConfig.activeKey);
            } else {
                const editorPanel = document.getElementById('locator-editor-panel');
                if (editorPanel) {
                    editorPanel.innerHTML = `
                        <div class="locator-editor-placeholder">
                            <p>–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                        </div>
                    `;
                }
            }

            updateStatus('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success');

        } catch (ex) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', ex);
            updateStatus(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: ${ex.message}`, 'error');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
     * –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∏–ª—å —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
     * 
     * Args:
     *     message (string): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     *     type (string): –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è ('success', 'error', '')
     */
    function updateStatus(message, type = '') {
        const statusText = document.getElementById('locator-status-text');
        if (statusText) {
            statusText.textContent = message;
            statusText.className = 'locator-status-text' + (type ? ` ${type}` : '');
        }
    }

    // ============================================================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò HTML –ü–û–õ–ï–ô
    // ============================================================================

    function createInput(key, label, value, type = 'text', parentKey = null) {
        const fieldId = `locator-field-${key}`;
        const dataAttr = parentKey ? `data-parent="${parentKey}"` : '';
        return `
            <label for="${fieldId}">${label}</label>
            <input type="${type}" id="${fieldId}" data-field="${key}" ${dataAttr} value="${value}">
        `;
    }

    function createTextArea(key, label, value) {
        const fieldId = `locator-field-${key}`;
        return `
            <label for="${fieldId}">${label}</label>
            <textarea id="${fieldId}" data-field="${key}">${value}</textarea>
        `;
    }

    function createCheckbox(key, label, isChecked) {
        const fieldId = `locator-field-${key}`;
        return `
            <label for="${fieldId}">${label}</label>
            <input type="checkbox" id="${fieldId}" data-field="${key}" ${isChecked ? 'checked' : ''}>
        `;
    }

    function createSelect(key, label, selectedValue, options) {
        const fieldId = `locator-field-${key}`;
        const optionsHtml = options.map(opt =>
            `<option value="${opt}" ${opt === selectedValue ? 'selected' : ''}>${opt}</option>`
        ).join('');
        return `
            <label for="${fieldId}">${label}</label>
            <select id="${fieldId}" data-field="${key}">${optionsHtml}</select>
        `;
    }

    // –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background script
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
        if (request.action === 'openLocatorModal') {
            openModal();
            sendResponse({ status: 'ok' });
        }
        return true;
    });

    console.log('Locator Modal Content Script loaded');
})();